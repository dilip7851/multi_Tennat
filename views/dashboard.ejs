<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background: linear-gradient(120deg, #f0f4f8, #d9e2ec);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      padding: 60px 20px;
    }

    .dashboard-container {
      background: #fff;
      max-width: 1000px;
      width: 100%;
      padding: 40px;
      border-radius: 16px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }

    h1,
    h2 {
      color: #2d3748;
    }

    h1 {
      font-size: 32px;
      margin-bottom: 20px;
    }

    .stats {
      display: flex;
      gap: 30px;
      margin-top: 30px;
    }

    .card {
      flex: 1;
      background: #edf2f7;
      padding: 30px;
      border-radius: 12px;
      text-align: center;
      transition: transform 0.2s ease;
    }

    .card:hover {
      transform: translateY(-5px);
    }

    .card h2 {
      font-size: 36px;
      color: #2b6cb0;
    }

    .card p {
      margin-top: 10px;
      font-size: 18px;
      color: #4a5568;
    }

    .actions {
      margin-top: 40px;
      display: flex;
      gap: 20px;
    }

    .btn {
      padding: 12px 20px;
      font-size: 16px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      transition: background 0.3s ease, transform 0.2s ease;
    }

    .btn.manage {
      background-color: #4299e1;
      color: white;
    }

    .btn.logout {
      background-color: #e53e3e;
      color: white;
    }

    .btn:hover {
      transform: translateY(-2px);
      opacity: 0.9;
    }

    .modal-overlay {
      position: fixed;
      top: -100%;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.4);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: top 0.4s ease;
    }

    .modal-overlay.show {
      top: 0;
    }
    
    .modal-content {
      background: #fff;
      padding: 30px 40px;
      border-radius: 12px;
      text-align: center;
      box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
      max-width: 450px;
      width: 90%;
      animation: slideDown 0.4s ease forwards;
    }

    @keyframes slideDown {
      from {
        transform: translateY(-30px);
        opacity: 0;
      }

      to {
        transform: translateY(0);
        opacity: 1;
      }
    }

    .modal-actions {
      margin-top: 25px;
      display: flex;
      justify-content: center;
      gap: 15px;
    }

    .modal-actions .btn {
      padding: 10px 18px;
      font-size: 15px;
    }

    .modal-actions .confirm {
      background-color: #2b6cb0;
      color: white;
    }

    .modal-actions .cancel {
      background-color: #e2e8f0;
      color: #1a202c;
    }

    .hidden {
      display: none;
    }

    table {
      width: 100%;
      margin-top: 10px;
      border-collapse: collapse;
    }

    th,
    td {
      padding: 12px;
      border-bottom: 1px solid #e2e8f0;
    }

    th {
      background-color: #f7fafc;
      text-align: left;
    }

    @media (max-width: 768px) {
      .stats {
        flex-direction: column;
      }
    }

    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }

    .form-group input {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      outline: none;
      border: 1px solid #ccc;
      font-size: 15px;
    }

    .error {
      color: #e53e3e;
      font-size: 13px;
      margin-top: 5px;
    }
  </style>
</head>

<body>

  <div class="dashboard-container">
    <h1>Welcome, <span id="adminName">Admin</span> ðŸ‘‹</h1>

    <div class="stats">
      <div class="card">
        <h2 id="totalUsers">--</h2>
        <p>Total Users</p>
      </div>
      <div class="card">
        <h2 id="totalAdmins">1</h2>
        <p>Total Admins</p>
      </div>
    </div>

    <div class="actions">
      <button class="btn manage" onclick="openCreateUserModal()">âž• Create User</button>
      <button class="btn logout" onclick="logout()">ðŸ”“ Logout</button>
    </div>

    <hr style="margin: 40px 0; border: none; border-top: 1px solid #e2e8f0;">

    <h2>ðŸ‘¥ Manage Users</h2>
    <table>
      <thead>
        <tr>
          <th>S.No</th>
          <th>Name</th>
          <th>Email</th>
          <th>Mobile</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="userTableBody">
        <!-- Filled by JavaScript -->
      </tbody>
    </table>
  </div>

  <div id="logoutModal" class="modal-overlay hidden">
    <div class="modal-content">
      <h3>Are you sure you want to logout?</h3>
      <div class="modal-actions">
        <button class="btn confirm" onclick="confirmLogout()">Yes, Logout</button>
        <button class="btn cancel" onclick="closeModal()">Cancel</button>
      </div>
    </div>
  </div>

  <div id="createUserModal" class="modal-overlay hidden">
    <div class="modal-content">
      <h2 style="margin-bottom: 20px; color: #2c5282;">âž• Create New User</h2>
      <form id="createUserForm">
        <div class="form-group">
          <input type="text" id="newUserName" placeholder="Full Name" />
          <div class="error" id="nameError"></div>
        </div>
        <div class="form-group">
          <input type="email" id="newUserEmail" placeholder="Email Address" />
          <div class="error" id="emailError"></div>
        </div>
        <div class="form-group">
          <input type="tel" id="newUserMobile" placeholder="Mobile Number" />
          <div class="error" id="mobileError"></div>
        </div>
        <div class="modal-actions">
          <button type="submit" class="btn confirm">Create User</button>
          <button type="button" class="btn cancel" onclick="closeCreateUserModal()">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <div id="deleteUserModal" class="modal-overlay hidden">
    <div class="modal-content">
      <h3>Are you sure you want to delete this user?</h3>
      <div class="modal-actions">
        <button class="btn confirm" onclick="confirmDeleteUser()">Yes, Delete</button>
        <button class="btn cancel" onclick="closeDeleteUserModal()">Cancel</button>
      </div>
    </div>
  </div>

  <script>



function checkAuth(){
    const token = localStorage.getItem('adminToken');
    if(!token){
    window.location.href='/login'
    }
    return  token
}


const token=checkAuth()

    const adminName = localStorage.getItem('adminName');
    // const token = localStorage.getItem('adminToken');
    const adminId = localStorage.getItem('adminId');

    let pendingDeleteUserId = null;

    document.getElementById('adminName').textContent = adminName?.toUpperCase() || 'Admin';


    async function fetchDashboardStats() {
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/getAllUsers`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        if (data.success) {
          document.getElementById('totalUsers').textContent = data.data.users.length;
        }
      } catch (err) {
        console.error("Dashboard fetch error:", err);
      }
    }

    async function fetchUsers() {
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/getAllUsers`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        const tbody = document.getElementById('userTableBody');
        tbody.innerHTML = '';

        if (data.success) {
          data.data.users.forEach((user, index) => {
            tbody.innerHTML += `
              <tr>
                <td>${index + 1}</td>
                <td>${user.userName}</td>
                <td>${user.email}</td>
                <td>${user.mobileNo}</td>
                <td><button class="btn logout" onclick="openDeleteUserModal('${user._id}')" style="padding:6px 10px;">ðŸ—‘ Delete</button></td>
              </tr>
            `;
          });
        }
      } catch (err) {
        console.error("Fetch users failed", err);
      }
    }

    function openDeleteUserModal(userId) {
      pendingDeleteUserId = userId;
      const modal = document.getElementById('deleteUserModal');
      modal.classList.remove('hidden');
      setTimeout(() => modal.classList.add('show'), 10);
    }

    function closeDeleteUserModal() {
      pendingDeleteUserId = null;
      const modal = document.getElementById('deleteUserModal');
      modal.classList.remove('show');
      setTimeout(() => modal.classList.add('hidden'), 300);
    }

    async function confirmDeleteUser() {
      if (!pendingDeleteUserId) return;
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/deleteUser/${pendingDeleteUserId}`, {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        if (res.ok && data.success) {
          fetchUsers();
          fetchDashboardStats();
        } else {
          alert("Delete failed: " + (data.message || "Unknown error"));
        }
      } catch (error) {
        console.error("Delete user error:", error);
      } finally {
        closeDeleteUserModal();
      }
    }

    function logout() {
      const modal = document.getElementById('logoutModal');
      modal.classList.remove('hidden');
      setTimeout(() => modal.classList.add('show'), 10);
    }


    function closeModal() {
      const modal = document.getElementById('logoutModal');
      modal.classList.remove('show');
      setTimeout(() => modal.classList.add('hidden'), 300);
    }

    function confirmLogout() {
      localStorage.removeItem("adminName");
      localStorage.removeItem("adminToken");
      localStorage.removeItem("adminId");
      window.location.href = '/login';
    }


    function openCreateUserModal() {
      const modal = document.getElementById('createUserModal');
      modal.classList.remove('hidden');
      setTimeout(() => modal.classList.add('show'), 10);

      document.getElementById('newUserName').value = '';
      document.getElementById('newUserEmail').value = '';
      document.getElementById('newUserMobile').value = '';
    }

    function closeCreateUserModal() {
      const modal = document.getElementById('createUserModal');
      modal.classList.remove('show');
      setTimeout(() => modal.classList.add('hidden'), 300);
    }

    const createUserForm = document.getElementById('createUserForm');
    createUserForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const name = document.getElementById('newUserName').value.trim();
      const email = document.getElementById('newUserEmail').value.trim();
      const mobile = document.getElementById('newUserMobile').value.trim();



      let hasError = false;
      document.getElementById('nameError').textContent = '';
      document.getElementById('emailError').textContent = '';
      document.getElementById('mobileError').textContent = '';

      if (!name) {
        document.getElementById('nameError').textContent = 'Full name is required';
        hasError = true;
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

      if (!email || !emailRegex.test(email)) {
        document.getElementById('emailError').textContent = 'Valid email required';
        hasError = true;
      }

      const mobileRegex = /^\d{10}$/;

      if (!mobile || !mobileRegex.test(mobile)) {
        document.getElementById('mobileError').textContent = '10-digit mobile required';
        hasError = true;
      }

      if (hasError) return;

      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/create-user`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify({ userName: name, email, mobileNo: mobile })
        });

        const result = await res.json();

        if (result.success) {
          closeCreateUserModal();
          fetchUsers();
          fetchDashboardStats();
        } else {
          alert(result.message || "Failed to create user.");
          document.getElementById('newUserName').value = '';
          document.getElementById('newUserEmail').value = '';
          document.getElementById('newUserMobile').value = '';

        }
      } catch (err) {
        console.error("Error creating user:", err);
        alert("An unexpected error occurred. Please try again.");
      }
    });

    fetchDashboardStats();
    fetchUsers();
  </script>
</body>

</html>
