<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --secondary: #3f37c9;
      --light: #f8f9fa;
      --dark: #212529;
      --success: #4cc9f0;
      --danger: #e74c3c;
      --warning: #f8961e;
      --info: #3498db;
      --sidebar-width: 250px;
      --transition: all 0.3s ease;
      --text-dark: #212529;
      --text-light: #f8f9fa;
      --bg-dark: #121212;
      --bg-light: #ffffff;
      --card-dark: #2d2d3a;
      --card-light: #ffffff;
      --border-dark: #444;
      --border-light: #eee;
    }

    [data-theme="dark"] {
      --text: var(--text-light);
      --bg: var(--bg-dark);
      --card: var(--card-dark);
      --border: var(--border-dark);
    }

    [data-theme="light"] {
      --text: var(--text-dark);
      --bg: var(--bg-light);
      --card: var(--card-light);
      --border: var(--border-light);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
      transition: var(--transition);
    }

    body {
      background: var(--bg);
      color: var(--text);
      min-height: 100vh;
      display: flex;
    }

    /* Sidebar */
    .sidebar {
      width: var(--sidebar-width);
      background: var(--card);
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      position: fixed;
      height: 100vh;
      z-index: 100;
      transition: var(--transition);
    }

    .sidebar.collapsed {
      width: 70px;
    }

    .sidebar .logo {
      padding: 20px;
      font-size: 20px;
      font-weight: 700;
      border-bottom: 1px solid var(--border);
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .sidebar ul {
      list-style: none;
      padding: 20px 0;
    }

    .sidebar li {
      padding: 12px 20px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 10px;
      color: var(--text);
    }

    .sidebar li:hover {
      background: rgba(0, 0, 0, 0.1);
    }

    .sidebar li.active {
      background: var(--primary);
      color: white;
    }

    .sidebar li i {
      font-size: 18px;
    }

    /* Main Content */
    .main-content {
      margin-left: var(--sidebar-width);
      width: calc(100% - var(--sidebar-width));
      padding: 30px;
      transition: var(--transition);
    }

    .sidebar.collapsed~.main-content {
      margin-left: 70px;
      width: calc(100% - 70px);
    }

    /* Dashboard Container */
    .dashboard-container {
      background: var(--card);
      border-radius: 12px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      padding: 30px;
      margin-bottom: 30px;
      color: var(--text);
    }

    /* Dashboard Header */
    .dashboard-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .header-actions {
      display: flex;
      gap: 10px;
    }

    /* Stats Cards */
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 20px 0;
    }

    .card {
      background: linear-gradient(135deg, var(--primary), var(--secondary));
      color: white;
      padding: 25px;
      border-radius: 10px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: var(--transition);
    }

    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
    }

    .card h2 {
      font-size: 32px;
      margin-bottom: 10px;
    }

    .card p {
      opacity: 0.9;
    }

    /* Table Controls */
    .table-controls {
      margin-bottom: 15px;
    }

    .table-controls input {
      padding: 10px;
      border: 1px solid var(--border);
      border-radius: 6px;
      background: var(--card);
      color: var(--text);
      width: 100%;
      max-width: 300px;
    }

    /* User Table */
    .table-container {
      margin-top: 20px;
      overflow-x: auto;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      background: var(--card);
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      color: var(--text);
    }

    th,
    td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid var(--border);
    }

    th {
      background: var(--primary);
      color: white;
      font-weight: 600;
    }

    th:hover,
    td:hover {
      background: rgba(0, 0, 0, 0.05);
    }

    /* Buttons */
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      transition: var(--transition);
      color: var(--text);
    }

    .btn.primary {
      background: var(--primary);
      color: white;
    }

    .btn.danger {
      background: var(--danger);
      color: white;
    }

    .btn:hover {
      opacity: 0.9;
      transform: translateY(-2px);
    }

    /* Modals */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: var(--transition);
    }

    .modal-overlay.show {
      opacity: 1;
      pointer-events: all;
    }

    .modal-content {
      background: var(--card);
      padding: 30px;
      border-radius: 10px;
      width: 90%;
      max-width: 500px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      transform: translateY(-20px);
      transition: var(--transition);
      color: var(--text);
    }

    .modal-overlay.show .modal-content {
      transform: translateY(0);
    }

    /* Theme Toggle */
    .theme-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .sidebar {
        transform: translateX(-100%);
      }

      .sidebar.active {
        transform: translateX(0);
      }

      .main-content {
        margin-left: 0;
        width: 100%;
      }
    }

    /* Form Styles */
    .form-group {
      margin-bottom: 20px;
      text-align: left;
    }

    .form-group input {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      outline: none;
      border: 1px solid var(--border);
      font-size: 15px;
      background: var(--card);
      color: var(--text);
      transition: var(--transition);
    }

    .error {
      color: var(--danger);
      font-size: 13px;
      margin-top: 5px;
    }
  </style>
</head>

<body data-theme="light">
  <!-- Sidebar -->
  <div class="sidebar">
    <div class="logo">
      ðŸ“Š Admin Panel
      <i class="fas fa-bars"></i>
    </div>
    <ul>
      <li class="active" onclick="loadSection('dashboard')">
        <i class="fas fa-tachometer-alt"></i> Dashboard
      </li>
      <li onclick="loadSection('users')">
        <i class="fas fa-users"></i> Users
      </li>
      <li onclick="loadSection('settings')">
        <i class="fas fa-cog"></i> Settings
      </li>
    </ul>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <div class="dashboard-container">
      <div class="dashboard-header">
        <h1>Welcome, <span id="adminName">Admin</span> ðŸ‘‹</h1>
        <div class="header-actions">
          <button class="btn primary" onclick="openCreateUserModal()">
            <i class="fas fa-plus"></i> Create User
          </button>
          <button class="btn danger" onclick="logout()">
            <i class="fas fa-sign-out-alt"></i> Logout
          </button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="stats">
        <div class="card">
          <h2 id="totalUsers">--</h2>
          <p>Total Users</p>
        </div>
        <div class="card">
          <h2 id="totalAdmins">1</h2>
          <p>Total Admins</p>
        </div>
      </div>

      <!-- Table Controls -->
      <div class="table-controls">
        <input type="text" placeholder="Search users..." onkeyup="filterUsers()">
      </div>

      <!-- User Table -->
      <h2>ðŸ‘¥ Manage Users</h2>
      <div class="table-container">
        <table>
          <thead>
            <tr>
              <th>S.No</th>
              <th>Name</th>
              <th>Email</th>
              <th>Mobile</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="userTableBody"></tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Logout Modal -->
  <div id="logoutModal" class="modal-overlay">
    <div class="modal-content">
      <h3>Are you sure you want to logout?</h3>
      <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
        <button class="btn danger" onclick="confirmLogout()">Yes, Logout</button>
        <button class="btn" onclick="closeModal('logoutModal')"
          style="background: #f0f0f0; color: #333;">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Create User Modal -->
  <div id="createUserModal" class="modal-overlay">
    <div class="modal-content">
      <h2 style="margin-bottom: 20px; color: var(--primary);">âž• Create New User</h2>
      <form id="createUserForm">
        <div class="form-group">
          <input type="text" id="newUserName" placeholder="Full Name" />
          <div class="error" id="nameError"></div>
        </div>
        <div class="form-group">
          <input type="email" id="newUserEmail" placeholder="Email Address" />
          <div class="error" id="emailError"></div>
        </div>
        <div class="form-group">
          <input type="tel" id="newUserMobile" placeholder="Mobile Number" />
          <div class="error" id="mobileError"></div>
        </div>
        <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
          <button type="submit" class="btn primary">Create User</button>
          <button type="button" class="btn" onclick="closeModal('createUserModal')"
            style="background: #f0f0f0; color: #333;">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete User Modal -->
  <div id="deleteUserModal" class="modal-overlay">
    <div class="modal-content">
      <h3>Are you sure you want to delete this user?</h3>
      <div style="display: flex; justify-content: center; gap: 15px; margin-top: 20px;">
        <button class="btn danger" onclick="confirmDeleteUser()">Yes, Delete</button>
        <button class="btn" onclick="closeModal('deleteUserModal')"
          style="background: #f0f0f0; color: #333;">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Theme Toggle Button -->
  <button class="theme-toggle" onclick="toggleTheme()">
    <i class="fas fa-moon"></i>
  </button>

  <script>
    // Theme Toggle
    function toggleTheme() {
      const body = document.body;
      const currentTheme = body.getAttribute('data-theme');
      body.setAttribute('data-theme', currentTheme === 'light' ? 'dark' : 'light');
      localStorage.setItem('theme', currentTheme === 'light' ? 'dark' : 'light');
    }

    // Check for saved theme
    if (localStorage.getItem('theme') === 'dark') {
      document.body.setAttribute('data-theme', 'dark');
    }

    // Modal Functions
    function openModal(modalId) {
      document.getElementById(modalId).classList.add('show');
    }
    function closeModal(modalId) {
      document.getElementById(modalId).classList.remove('show');
    }

    // Sidebar Toggle (Mobile)
    document.querySelector('.logo').addEventListener('click', () => {
      document.querySelector('.sidebar').classList.toggle('collapsed');
    });

    // Navigation
    function loadSection(section) {
      document.querySelectorAll('.sidebar li').forEach(li => {
        li.classList.remove('active');
      });
      event.currentTarget.classList.add('active');

      if (section === 'users') {
        alert("Users section clicked! (Load user management UI here)");
      } else if (section === 'settings') {
        alert("Settings section clicked! (Load settings UI here)");
      }
    }

    // Your existing functions
    function checkAuth() {
      const token = localStorage.getItem('adminToken');
      if (!token) {
        window.location.href = '/login';
      }
      return token;
    }

    const token = checkAuth();
    const adminName = localStorage.getItem('adminName');
    const adminId = localStorage.getItem('adminId');
    let pendingDeleteUserId = null;

    document.getElementById('adminName').textContent = adminName?.toUpperCase() || 'Admin';

    async function fetchDashboardStats() {
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/getAllUsers`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        if (data.success) {
          document.getElementById('totalUsers').textContent = data.data.users.length;
        }
      } catch (err) {
        console.error("Dashboard fetch error:", err);
      }
    }

    async function fetchUsers() {
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/getAllUsers`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        const tbody = document.getElementById('userTableBody');
        tbody.innerHTML = '';
        if (data.success) {
          data.data.users.forEach((user, index) => {
            tbody.innerHTML += `
              <tr>
                <td>${index + 1}</td>
                <td>${user.userName}</td>
                <td>${user.email}</td>
                <td>${user.mobileNo}</td>
                <td>
                  <button class="btn danger" onclick="openDeleteUserModal('${user._id}')" style="padding: 6px 10px;">
                    <i class="fas fa-trash"></i> Delete
                  </button>
                </td>
              </tr>
            `;
          });
        }
      } catch (err) {
        console.error("Fetch users failed", err);
      }
    }

    function openDeleteUserModal(userId) {
      pendingDeleteUserId = userId;
      openModal('deleteUserModal');
    }

    async function confirmDeleteUser() {
      if (!pendingDeleteUserId) return;
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/deleteUser/${pendingDeleteUserId}`, {
          method: "DELETE",
          headers: { Authorization: `Bearer ${token}` }
        });
        const data = await res.json();
        if (res.ok && data.success) {
          fetchUsers();
          fetchDashboardStats();
        } else {
          alert("Delete failed: " + (data.message || "Unknown error"));
        }
      } catch (error) {
        console.error("Delete user error:", error);
      } finally {
        closeModal('deleteUserModal');
      }
    }

    function logout() {
      openModal('logoutModal');
    }

    function confirmLogout() {
      localStorage.removeItem("adminName");
      localStorage.removeItem("adminToken");
      localStorage.removeItem("adminId");
      window.location.href = '/login';
    }

    function openCreateUserModal() {
      document.getElementById('newUserName').value = '';
      document.getElementById('newUserEmail').value = '';
      document.getElementById('newUserMobile').value = '';
      openModal('createUserModal');
    }

    // Search Functionality
    function filterUsers() {
      const input = document.querySelector('.table-controls input');
      const filter = input.value.toLowerCase();
      const rows = document.querySelectorAll('#userTableBody tr');

      rows.forEach(row => {
        const name = row.cells[1].textContent.toLowerCase();
        const email = row.cells[2].textContent.toLowerCase();
        row.style.display = (name.includes(filter) || email.includes(filter)) ? '' : 'none';
      });
    }

    const createUserForm = document.getElementById('createUserForm');
    createUserForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const name = document.getElementById('newUserName').value.trim();
      const email = document.getElementById('newUserEmail').value.trim();
      const mobile = document.getElementById('newUserMobile').value.trim();
      let hasError = false;
      document.getElementById('nameError').textContent = '';
      document.getElementById('emailError').textContent = '';
      document.getElementById('mobileError').textContent = '';
      if (!name) {
        document.getElementById('nameError').textContent = 'Full name is required';
        hasError = true;
      }
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email || !emailRegex.test(email)) {
        document.getElementById('emailError').textContent = 'Valid email required';
        hasError = true;
      }
      const mobileRegex = /^\d{10}$/;
      if (!mobile || !mobileRegex.test(mobile)) {
        document.getElementById('mobileError').textContent = '10-digit mobile required';
        hasError = true;
      }
      if (hasError) return;
      try {
        const res = await fetch(`http://localhost:8000/admin/${adminId}/create-user`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify({ userName: name, email, mobileNo: mobile })
        });
        const result = await res.json();
        if (result.success) {
          closeModal('createUserModal');
          fetchUsers();
          fetchDashboardStats();
        } else {
          alert(result.message || "Failed to create user.");
        }
      } catch (err) {
        console.error("Error creating user:", err);
        alert("An unexpected error occurred. Please try again.");
      }
    });

    // Initialize
    fetchDashboardStats();
    fetchUsers();
  </script>
</body>

</html>